// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/alligrader/gradebook-api/designs
// --out=$(GOPATH)/src/github.com/alligrader/gradebook-api/src
// --version=v1.1.0-dirty
//
// API "GradebookAPI": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"strconv"
)

// ReadGithubTokenContext provides the GithubToken read action context.
type ReadGithubTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewReadGithubTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the GithubToken controller read action.
func NewReadGithubTokenContext(ctx context.Context, service *goa.Service) (*ReadGithubTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ReadGithubTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadGithubTokenContext) OK(r *GithubtokenMt) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/githubtoken.mt")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// CreateBugProfileContext provides the bug_profile create action context.
type CreateBugProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *BugProfile
}

// NewCreateBugProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the bug_profile controller create action.
func NewCreateBugProfileContext(ctx context.Context, service *goa.Service) (*CreateBugProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateBugProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateBugProfileContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// DeleteBugProfileContext provides the bug_profile delete action context.
type DeleteBugProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID int
}

// NewDeleteBugProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the bug_profile controller delete action.
func NewDeleteBugProfileContext(ctx context.Context, service *goa.Service) (*DeleteBugProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteBugProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			rctx.ProfileID = profileID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteBugProfileContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteBugProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListBugProfileContext provides the bug_profile list action context.
type ListBugProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListBugProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the bug_profile controller list action.
func NewListBugProfileContext(ctx context.Context, service *goa.Service) (*ListBugProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListBugProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBugProfileContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// ShowBugProfileContext provides the bug_profile show action context.
type ShowBugProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID int
}

// NewShowBugProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the bug_profile controller show action.
func NewShowBugProfileContext(ctx context.Context, service *goa.Service) (*ShowBugProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowBugProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			rctx.ProfileID = profileID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBugProfileContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBugProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateBugProfileContext provides the bug_profile update action context.
type UpdateBugProfileContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ProfileID int
	Payload   *BugProfile
}

// NewUpdateBugProfileContext parses the incoming request URL and body, performs validations and creates the
// context used by the bug_profile controller update action.
func NewUpdateBugProfileContext(ctx context.Context, service *goa.Service) (*UpdateBugProfileContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateBugProfileContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramProfileID := req.Params["profileID"]
	if len(paramProfileID) > 0 {
		rawProfileID := paramProfileID[0]
		if profileID, err2 := strconv.Atoi(rawProfileID); err2 == nil {
			rctx.ProfileID = profileID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("profileID", rawProfileID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateBugProfileContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateBugProfileContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// LoginGhContext provides the gh login action context.
type LoginGhContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLoginGhContext parses the incoming request URL and body, performs validations and creates the
// context used by the gh controller login action.
func NewLoginGhContext(ctx context.Context, service *goa.Service) (*LoginGhContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := LoginGhContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginGhContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// Login2GhContext provides the gh login2 action context.
type Login2GhContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogin2GhContext parses the incoming request URL and body, performs validations and creates the
// context used by the gh controller login2 action.
func NewLogin2GhContext(ctx context.Context, service *goa.Service) (*Login2GhContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := Login2GhContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *Login2GhContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *User
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OKGithub sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OKGithub(r *UserMtGithub) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/user.mt")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ReadUserContext provides the user read action context.
type ReadUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewReadUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller read action.
func NewReadUserContext(ctx context.Context, service *goa.Service) (*ReadUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ReadUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ReadUserContext) OK(r *UserMt) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/user.mt")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKGithub sends a HTTP response with status code 200.
func (ctx *ReadUserContext) OKGithub(r *UserMtGithub) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/user.mt")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ReadUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *User
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserContext) OK(r *UserMt) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/user.mt")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKGithub sends a HTTP response with status code 200.
func (ctx *UpdateUserContext) OKGithub(r *UserMtGithub) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/user.mt")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
