// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/alligrader/gradebook-api/designs
// --out=$(GOPATH)/src/github.com/alligrader/gradebook-api/src
// --version=v1.1.0-dirty
//
// API "GradebookAPI": Models
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/alligrader/gradebook-api/src/app"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"golang.org/x/net/context"
	"time"
)

// User Model Description
type User struct {
	ID        int `gorm:"primary_key"` // This is the User Model PK field
	CreatedAt time.Time
	DeletedAt *time.Time
	Email     *string
	Name      *string
	Password  *string
	Salt      string // This stores the salt for the hash
	UpdatedAt time.Time
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m User) TableName() string {
	return "users"

}

// UserDB is the implementation of the storage interface for
// User.
type UserDB struct {
	Db *gorm.DB
}

// NewUserDB creates a new storage type.
func NewUserDB(db *gorm.DB) *UserDB {
	return &UserDB{Db: db}
}

// DB returns the underlying database.
func (m *UserDB) DB() interface{} {
	return m.Db
}

// UserStorage represents the storage interface.
type UserStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*User, error)
	Get(ctx context.Context, id int) (*User, error)
	Add(ctx context.Context, user *User) error
	Update(ctx context.Context, user *User) error
	Delete(ctx context.Context, id int) error

	ListUserMtIncoming(ctx context.Context) []*app.UserMtIncoming
	OneUserMtIncoming(ctx context.Context, id int) (*app.UserMtIncoming, error)

	ListUserMtOnLogin(ctx context.Context) []*app.UserMtOnLogin
	OneUserMtOnLogin(ctx context.Context, id int) (*app.UserMtOnLogin, error)

	ListUserMt(ctx context.Context) []*app.UserMt
	OneUserMt(ctx context.Context, id int) (*app.UserMt, error)

	UpdateFromUserCreate(ctx context.Context, payload *app.UserCreate, id int) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *UserDB) TableName() string {
	return "users"

}

// CRUD Functions

// Get returns a single User as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *UserDB) Get(ctx context.Context, id int) (*User, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "get"}, time.Now())

	var native User
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of User
func (m *UserDB) List(ctx context.Context) ([]*User, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "list"}, time.Now())

	var objs []*User
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *UserDB) Add(ctx context.Context, model *User) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding User", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *UserDB) Update(ctx context.Context, model *User) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating User", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *UserDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "delete"}, time.Now())

	var obj User

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting User", "error", err.Error())
		return err
	}

	return nil
}

// UserFromUserCreate Converts source UserCreate to target User model
// only copying the non-nil fields from the source.
func UserFromUserCreate(payload *app.UserCreate) *User {
	user := &User{}
	if payload.Email != nil {
		user.Email = payload.Email
	}
	if payload.Name != nil {
		user.Name = payload.Name
	}
	if payload.Password != nil {
		user.Password = payload.Password
	}

	return user
}

// UpdateFromUserCreate applies non-nil changes from UserCreate to the model and saves it
func (m *UserDB) UpdateFromUserCreate(ctx context.Context, payload *app.UserCreate, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "updatefromuserCreate"}, time.Now())

	var obj User
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving User", "error", err.Error())
		return err
	}
	if payload.Email != nil {
		obj.Email = payload.Email
	}
	if payload.Name != nil {
		obj.Name = payload.Name
	}
	if payload.Password != nil {
		obj.Password = payload.Password
	}

	err = m.Db.Save(&obj).Error
	return err
}
