// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/alligrader/gradebook-api/designs
// --out=$(GOPATH)/src/github.com/alligrader/gradebook-api/src
// --version=v1.1.0-dirty
//
// API "GradebookAPI": gh Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// LoginGhPath computes a request path to the login action of gh.
func LoginGhPath() string {

	return fmt.Sprintf("/api/gh")
}

// LoginGh makes a request to the login action endpoint of the gh resource
func (c *Client) LoginGh(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLoginGhRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginGhRequest create the request corresponding to the login action endpoint of the gh resource.
func (c *Client) NewLoginGhRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// Login2GhPath computes a request path to the login2 action of gh.
func Login2GhPath() string {

	return fmt.Sprintf("/api/gh")
}

// Login2Gh makes a request to the login2 action endpoint of the gh resource
func (c *Client) Login2Gh(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLogin2GhRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLogin2GhRequest create the request corresponding to the login2 action endpoint of the gh resource.
func (c *Client) NewLogin2GhRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
