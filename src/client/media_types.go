// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/alligrader/gradebook-api/designs
// --out=$(GOPATH)/src/github.com/alligrader/gradebook-api/src
// --version=v1.1.0-dirty
//
// API "GradebookAPI": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// UserMt media type (default view)
//
// Identifier: application/user.mt; view=default
type UserMt struct {
	// User email
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	ID          *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
}

// Validate validates the UserMt media type instance.
func (mt *UserMt) Validate() (err error) {
	if mt.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *mt.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, *mt.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// UserMt media type (github view)
//
// Identifier: application/user.mt; view=github
type UserMtGithub struct {
	Callback *string `form:"callback,omitempty" json:"callback,omitempty" xml:"callback,omitempty"`
	// User email
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	ID          *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	PhoneNumber *string `form:"phone_number,omitempty" json:"phone_number,omitempty" xml:"phone_number,omitempty"`
}

// Validate validates the UserMtGithub media type instance.
func (mt *UserMtGithub) Validate() (err error) {
	if mt.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *mt.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, *mt.Email, goa.FormatEmail, err2))
		}
	}
	return
}

// DecodeUserMt decodes the UserMt instance encoded in resp body.
func (c *Client) DecodeUserMt(resp *http.Response) (*UserMt, error) {
	var decoded UserMt
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeUserMtGithub decodes the UserMtGithub instance encoded in resp body.
func (c *Client) DecodeUserMtGithub(resp *http.Response) (*UserMtGithub, error) {
	var decoded UserMtGithub
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
