// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/alligrader/gradebook-api/designs
// --out=$(GOPATH)/src/github.com/alligrader/gradebook-api/src
// --version=v1.1.0-dirty
//
// API "GradebookAPI": bug_profile Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// CreateBugProfilePath computes a request path to the create action of bug_profile.
func CreateBugProfilePath() string {

	return fmt.Sprintf("/api/bug-profile")
}

// Make me a new bug profile
func (c *Client) CreateBugProfile(ctx context.Context, path string, payload *BugProfile) (*http.Response, error) {
	req, err := c.NewCreateBugProfileRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateBugProfileRequest create the request corresponding to the create action endpoint of the bug_profile resource.
func (c *Client) NewCreateBugProfileRequest(ctx context.Context, path string, payload *BugProfile) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteBugProfilePath computes a request path to the delete action of bug_profile.
func DeleteBugProfilePath(profileID int) string {
	param0 := strconv.Itoa(profileID)

	return fmt.Sprintf("/api/bug-profile/%s", param0)
}

// I don't want this bug profile anymore
func (c *Client) DeleteBugProfile(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteBugProfileRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteBugProfileRequest create the request corresponding to the delete action endpoint of the bug_profile resource.
func (c *Client) NewDeleteBugProfileRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBugProfilePath computes a request path to the list action of bug_profile.
func ListBugProfilePath() string {

	return fmt.Sprintf("/api/bug-profile")
}

// Show all of my bug profiles
func (c *Client) ListBugProfile(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBugProfileRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBugProfileRequest create the request corresponding to the list action endpoint of the bug_profile resource.
func (c *Client) NewListBugProfileRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowBugProfilePath computes a request path to the show action of bug_profile.
func ShowBugProfilePath(profileID int) string {
	param0 := strconv.Itoa(profileID)

	return fmt.Sprintf("/api/bug-profile/%s", param0)
}

// Show a single bug profile
func (c *Client) ShowBugProfile(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowBugProfileRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowBugProfileRequest create the request corresponding to the show action endpoint of the bug_profile resource.
func (c *Client) NewShowBugProfileRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateBugProfilePath computes a request path to the update action of bug_profile.
func UpdateBugProfilePath(profileID int) string {
	param0 := strconv.Itoa(profileID)

	return fmt.Sprintf("/api/bug-profile/%s", param0)
}

// Update my pre-existing bug profile
func (c *Client) UpdateBugProfile(ctx context.Context, path string, payload *BugProfile) (*http.Response, error) {
	req, err := c.NewUpdateBugProfileRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateBugProfileRequest create the request corresponding to the update action endpoint of the bug_profile resource.
func (c *Client) NewUpdateBugProfileRequest(ctx context.Context, path string, payload *BugProfile) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	return req, nil
}
